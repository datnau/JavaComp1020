#include <Wire.h>
#include <Adafruit_TCS34725.h>
#include <AccelStepper.h>
#include <Adafruit_MotorShield.h>
#include <Servo.h>

// Initialize the color sensor
Adafruit_TCS34725 tcs = Adafruit_TCS34725(TCS34725_INTEGRATIONTIME_50MS, TCS34725_GAIN_1X);

Adafruit_MotorShield AFMStop(0x60); // Default address, no jumpers
Adafruit_StepperMotor *myStepper1 = AFMStop.getStepper(200, 1);
Adafruit_StepperMotor *myStepper2 = AFMStop.getStepper(200, 2);

// wrappers for the first motor
void forwardstep1() {
  myStepper1->onestep(FORWARD, SINGLE);
}
void backwardstep1() {
  myStepper1->onestep(BACKWARD, SINGLE);
}

// wrappers for the second motor
void forwardstep2() {
  myStepper2->onestep(FORWARD, SINGLE);
}
void backwardstep2() {
  myStepper2->onestep(BACKWARD, SINGLE);
}

// AccelStepper objects for both motors
AccelStepper stepper1(forwardstep1, backwardstep1);
AccelStepper stepper2(forwardstep2, backwardstep2);

// Servo motors
Servo servo1;
Servo servo2;

void setup() {
  Serial.begin(9600);

  if (!tcs.begin()) {
    Serial.println("No TCS34725 found ... check your connections");
    while (1);
  }

  AFMStop.begin(); // Start the motor shield

  // Setup stepper parameters
  stepper1.setMaxSpeed(100.0);
  stepper1.setAcceleration(100.0);
  stepper2.setMaxSpeed(100.0);
  stepper2.setAcceleration(100.0);

  // Attach servos to pins
  servo1.attach(9);  // Attach servo1 to pin 9
  servo2.attach(10); // Attach servo2 to pin 10

  // Set initial positions
  servo1.write(0);  // Start at 0 degrees
  servo2.write(0);  // Start at 0 degrees
  servo1.detach(); // Detach initially
  servo2.detach(); // Detach initially
}

void loop() {
  uint16_t r, g, b, c;
  tcs.getRawData(&r, &g, &b, &c);

  // Check for black color (adjust threshold as necessary)
  if (r < 10 && g < 10 && b < 10) {
    // Rotate stepper1 by 45 degrees (50 steps)
    int steps1 = 50; 
    stepper1.moveTo(stepper1.currentPosition() + steps1);
    while (stepper1.distanceToGo() != 0) {
      stepper1.run();
    }
    delay(1000); // 1-second delay after stepper1

    // Rotate stepper2 by 45 degrees (50 steps)
    int steps2 = 50; 
    stepper2.moveTo(stepper2.currentPosition() + steps2);
    while (stepper2.distanceToGo() != 0) {
      stepper2.run();
    }
    delay(1000); // 1-second delay after stepper2

    // Rotate servo1 to 100 degrees
    servo1.attach(9);      // Reattach servo1
    servo1.write(100);
    delay(500);            // Wait for the servo to move
    servo1.detach();       // Detach to stop continuous movement
    delay(1000);           // 1-second delay after servo1

    // Rotate servo2 to 100 degrees
    servo2.attach(10);     // Reattach servo2
    servo2.write(100);
    delay(500);            // Wait for the servo to move
    servo2.detach();       // Detach to stop continuous movement
    delay(1000);           // 1-second delay after servo2

    // **Return all motors and servos to their initial positions**

    // Return servo2 to 0 degrees
    servo2.attach(10);
    servo2.write(0);       // Set servo2 back to 0 degrees
    delay(500);            // Wait for the servo to return
    servo2.detach();       // Detach to stop continuous movement
    delay(1000);           // 1-second delay after servo2 return

    // Return servo1 to 0 degrees
    servo1.attach(9);
    servo1.write(0);       // Set servo1 back to 0 degrees
    delay(500);            // Wait for the servo to return
    servo1.detach();       // Detach to stop continuous movement
    delay(1000);           // 1-second delay after servo1 return

    // Return stepper2 to the initial position
    stepper2.moveTo(0);
    while (stepper2.distanceToGo() != 0) {
      stepper2.run();
    }
    delay(1000); // 1-second delay after stepper2 return

    // Return stepper1 to the initial position
    stepper1.moveTo(0);
    while (stepper1.distanceToGo() != 0) {
      stepper1.run();
    }
    delay(1000); // 1-second delay after stepper1 return
  }

  delay(500); // Short delay to prevent rapid triggering
}
